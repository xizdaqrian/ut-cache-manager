#!/usr/bin/python3
#
# ut-cache-mgr-2
# By Rodney Fisk <xizdaqrian@gmail.com>
# Adapted from ut-cache-manager
# by:
# ------------------------------------------------------------------------
# Martin Tournoij <martin@arp242.net>
# http://carpetsmoker.net/weblog/Manage_Unreal_Tournament_cache_files.php
# Free to use for whatever purpose. There are no restrictions.
# Version 20100624
#
# This is a very simple script to manage unreal tournament cache files.
# Works on Windows, FreeBSD, Linux.
# ------------------------------------------------------------------------
# Thank you Martin

# Imports
import datetime
import getopt
import os
import re           # REGEX
import shutil
import sys
import time


# http://stackoverflow.com/questions/287871/print-in-terminal-with-colors-using-python
# http://stackoverflow.com/questions/4842424/list-of-ansi-color-escape-sequences
#class bcolors:
    #''' A set of colors for printing '''

## Foreground Standard
#red = '\033[31m'
#blue = '\033[34m'
#cyan = '\033[36m'
#reset = '\033[0m'
#white = '\033[37m'
#green = '\033[32m'
#black = '\033[30m'
#yellow = '\033[33m'
#magenta = '\033[35m'

## Foreground Bold
#b_red = '\033[31;1m'
#b_blue = '\033[34;1m'
#b_cyan = '\033[36;1m'
#b_white = '\033[37;1m'
#b_green = '\033[32;1m'
#b_black = '\033[30;1m'
#b_yellow = '\033[33;1m'
#b_magenta = '\033[35;1m'

## Background Standard
#red_back = '\033[41m'
#blue_back = '\033[44m'
#cyan_back = '\033[46m'
#white_back = '\033[47m'
#green_back = '\033[42m'
#black_back = '\033[40m'
#yellow_back = '\033[43m'
#magenta_back = '\033[45m'


def read_config():
    '''reads dotfile named after the invocation name of the script'''
    rc_file = '%s/.%src' % (user_home, this_name)
    config_pairs = {}

    if not os.path.exists(rc_file):
        return 1

    print('Using settings found in {}'.format(rc_file))

    with open(rc_file, 'r') as rc_:
        for line in rc_:
            if not line.startswith(('[', '# ', '\0', '\n')) and not line == '':
                line = line.strip()
                (key, val) = line.split('=')
                key = key.strip()
                val = val.strip()
                config_pairs[key] = val

    for k_key, v_val in config_pairs.items():
        # Can't be [0-9]. It must be a "tuple of string"
        if not v_val.startswith(tuple(str(range(10)))):
            # globals()[k] = v[1:-1]
            globals()[k_key] = v_val
        else:
            globals()[k_key] = int(v_val)

    return 0


def write_config(argv):
    ''' Write a default set of values when creating a new config file '''
    # config = configparser.ConfigParser()
    rc_name = '%s/.%src' % (user_home, this_name)

    Paths = {'#': 'For paths containing spaces, do not escape spaces with backslashes',
             'game_folder': 'Games/Epic/UT2004/',
             'cache_folder': 'Games/Epic/UT2004/Cache/'}
    Files = {'ini_file': 'cache.ini',
             'cache_extension': 'uxx'}
    Options = {'do_color': '0',
               'do_summary': '0',
               'pause_output': '0',
               'show_missing': '0'}
    try:
        # By accessing locals(), we get the complete list of local variables.
        # This way we don't have to change anything below, after editing the
        # dictionaries above. We have to make a copy, which is static
        # locals() changes when we iterate over it
        locals_ = locals().copy()
        with open(rc_name, 'w') as config_file:
            for i in locals_.keys():
                # Is the word "dict" in the type output?
                if str(type(locals()[i])).find('dict') != -1:
                    section_line = '[' + i + ']\n'
                    config_file.write(section_line)
                    for k_key, v_val in eval(i).items():
                        kv_pair_line = k_key + '=' + v_val + '\n'
                        config_file.write(kv_pair_line)
                        config_file.write('\n')
        config_file.close()

        print('Config file written to {}'.format(rc_name))
        exit(0)
    except IOError as err:
        print(err)
        exit(1)


# http://stackoverflow.com/questions/566746/how-to-get-console-window-width-in-python
def get_terminal_size():
    ''' Get terminial size in lines and columns. Helper for pausing output \
            every screenful '''
    env = os.environ

    def ioctl_gwinsz(file_descr):
        try:
            import fcntl
            import termios
            import struct
            rows_cols = struct.unpack('hh',
                                      fcntl.ioctl(file_desrows_cols,
                                                  termios.TIOCGWINSZ,
                                                  '1234'))
        except Exception:
            return
        return rows_cols
    rows_cols = ioctl_gwinsz(0) or ioctl_gwinsz(1) or ioctl_gwinsz(2)
    if not rows_cols:
        try:
            file_desrows_cols = os.open(os.ctermid(), os.O_RDONLY)
            rows_cols = ioctl_gwinsz(file_desrows_cols)
            os.close(file_desrows_cols)
        except Exception:
            pass
    if not rows_cols:
        rows_cols = (env.get('LINES', 25), env.get('COLUMNS', 80))

        # # # Use get(key[, default]) instead of a try/catch
        # try:
        #    rows_cols = (env['LINES'], env['COLUMNS'])
        # except:
        #    rows_cols = (25, 80)
    return int(rows_cols[1]), int(rows_cols[0])


def print_ver():
    ''' Print the current file version of this script '''
    print ('{} - v0.51'.format(this_name))
    sys.exit(0)


def print_help():
    ''' Print a complete help screen '''
    print ("USAGE:")
    print ("{}{}[-h|--help] [-v|--version]".format(str(sys.argv[0]), yellow))
    print ("{}[-p|--pause]  {}Pause output at each screenful".format(yellow, reset))
    print ("{}[-m|--show-missing]  {}Show entries which have no corresponding \
           file".format(yellow, reset))
    print ("{}[-l|--colorize]  {}Colorize output".format(yellow, reset))
    print ("{}[-r|--make-rc]   {}Create an rc file".format(yellow  , reset))
    print ('{}[-e|--separate]  {}Extract mirrors game\'s folder structure'.\
           format(yellow, reset))
    print ("{}[-f|--cache-file]   {}Default is cache.ini".format(yellow  , reset))
    print ("{}[-c|--cache-folder] {}path/to/cache".format(yellow  , reset))   
    print ("{}[-x|--extract] {}path/to/extract".format(yellow  , reset))
    print ("{}[REGEX] {}Regular expression search term (Can be either date or \
           name)".format(yellow  , reset))
    print ("\nIf REGEX is the only argument given, search is implied.")
    sys.exit(0)


def exists_ini_file():
    ''' Check to see if a cache.ini or equivalent exists in supplied path '''
    try:
        cache_folder
    except NameError:
        print ('==>ERROR: The Cache folder has not been specified')
        print_help()
        sys.exit(1)

    try:
        ini_file
    except NameError:
        print ('==>ERROR: The INI filename has not been specified')
        print_help()
        sys.exit(1)

    ini = os.path.join(str(cache_folder), ini_file)
    print ('Ini file path: {}'.format(ini))
    if not os.path.exists(ini):
        print ('Error: file {} does not exist.'.format(ini_file))
        print ('Example: %s -c C:\\games\\UnrealTournament\\Cache\\ -f cache.ini' % sys.argv[0])
        sys.exit(1)


def read_file(filename, regex):
    ''' Read the ini file supplied and parse it '''
    move = []
    with open(filename, 'r') as file_name:
        for line in file_name:
            if line[0] == ';' or line[0] == '[':
                continue

            line = line.strip()
            if line == '':
                continue

            l = line.split('=')
            # http://www.tutorialspoint.com/python/python_reg_expressions.htm
            # Make regex case insensitive and make ^|$ match beg. & end of line
            uxx = str(l[0]) + '.uxx'
            l.insert(1, uxx)
            del l[0]
            if os.path.exists('%s/%s' % (cache_folder, l[0])):
                uxx_ctime = time.strftime("%m-%d-%Y", time.gmtime(os.stat('%s/%s' % (cache_folder, l[0])).st_ctime))
            else:
                uxx_ctime = 'Not  Found'

            l.insert(0, uxx_ctime)

            search_obj_date = re.search(regex, l[0], re.M | re.I)
            search_obj_name = re.search(regex, l[2], re.M | re.I)
            if search_obj_date or search_obj_name:
                move.append(l)

    file_name.close()
    return move


def search(regex):
    ''' Search for, & display, objects specified in command line arguments '''
    missing = []
    counter = 1
    (width, height) = get_terminal_size()

    exists_ini_file()
    move = read_file(os.path.join(cache_folder, ini_file), regex)

    for file in move:
        uxx_ctime = file[0]
        uxx_file = file[1]
        true_file = file[2]
        if file[0] != 'Not  Found':
            # http://www.seanelavelle.com/2012/05/04/make-os-stat-times-readable-in-python/
            if do_color == 1:
                print ('{}{}    {}{}    {}{}'.format(green, uxx_ctime, \
                            b_black, uxx_file, reset, true_file))
            else:
                print ("{}    {}    {}".format(uxx_ctime, uxx_file, true_file))
        else:
            if do_color == 1 and show_missing == 1:
                print ('{}{}    {}{}    {}{}'.format(b_red, uxx_ctime, \
                            b_black, uxx_file, reset, true_file))
            elif do_color != 1 and show_missing == 1:
                print ("{}    {}    {}".format(uxx_ctime, uxx_file, true_file))
            missing.append(file)

        counter += 1
        if counter == (height - 3) and pause_output == 1:
            # pause at each screenful
            os.system("read -n 1 -p \"Press any key to continue\n\" ")
            counter = 0

    if do_summary:
        print ("Entries decoded:\t{0}{1:4d}{2}".format(cyan, len(move), reset))
        print ("Missing files\t\t{0}{1:4d}{2}".format(b_red, len(missing), reset))
        print ("Extractable files:\t{0}{1:4d}{2}".format(green, (len(move) - len(missing)), reset))
        if show_missing != 1:
            print ("Show missing results with the \'-m\' option")

    exit(0)


def extract(regex):
    ''' Copy the files to destfolder and rename them to truename '''
    missing = []
    exists_ini_file()
    move = read_file(os.path.join(cache_folder, ini_file), regex)
    game_tag = this_name.split('-', 1)[0]
    today_folder = datetime.datetime.now().strftime("%Y-%m-%d")
    final_dest = os.path.join(dest_folder, game_tag, today_folder)
    sep_list = {'unr': 'Maps', 'ut2': 'Maps', 'ut3': 'Maps',
                   'u': 'System', 'ucl': 'System', 'upl': 'System',
                   'utx': 'Textures', 'umx': 'Music',
                   'ukx': 'KarmaData', 'uax': 'Sounds',
                   'usx': 'StaticMeshes', 'upk': 'EverythingElse'} 


    if not dest_folder:
        print('==>{}ERROR{}:  Please specify a destination folder'.format(\
               red, reset))
        print_help()

    try:
        os.makedirs(final_dest, exist_ok=True)
    except os.error as err:
        print(err)
        exit(1)

    for package in move:
        if package[0] == 'Not  Found':
            missing.append(package)
            continue

        src = '%s/%s' % (cache_folder, package[1])
        ext = package[2].split('.')[1]


        if do_separate:
            if ext in sep_list:
                sep_dir = sep_list[ext]
            else:
                sep_dir = 'unk'

            os.makedirs(os.path.join(final_dest, sep_dir), exist_ok=True)
            dst = '%s/%s/%s' % (final_dest, sep_dir, package[2])
        else:
            dst = '%s/%s' % (final_dest, package[2])


        try:
            shutil.copy2(src, dst)
            print('extracting {}{} {}==> {}{}{}'.format(b_black, package[1],\
                                                 reset, green, dst, reset))
        except shutil.Error as err:
            print(err)
            exit(1)

    if do_summary:
        print ("Entries decoded:\t{0}{1:4d}{2}".format(cyan, len(move), reset))
        print ("missing files\t\t{0}{1:4d}{2}".format(b_red, len(missing), reset))
        print ("Extracted files:\t{0}{1:4d}{2}".format(green, (len(move) - \
                                                        len(missing)), reset))
    exit(0)


def main(argv):
    ''' This is where the magic happens '''
    # Globals
    global cache_extension
    global cache_folder
    global dest_folder
    global do_color
    global do_extract
    global do_separate
    global do_summary
    global game_folder
    global ini_file
    global osPlatform
    global pause_output
    global show_missing
    global this_name
    global user_home
    global red
    global blue
    global cyan
    global reset
    global white
    global green
    global black
    global yellow
    global magenta
    global b_red
    global b_blue
    global b_cyan
    global b_white
    global b_green
    global b_black
    global b_yellow
    global b_magenta
    global red_back
    global blue_back
    global cyan_back
    global white_back
    global green_back
    global black_back
    global yellow_back
    global magenta_back

# Foreground Standard
    red = '\033[31m'
    blue = '\033[34m'
    cyan = '\033[36m'
    reset = '\033[0m'
    white = '\033[37m'
    green = '\033[32m'
    black = '\033[30m'
    yellow = '\033[33m'
    magenta = '\033[35m'

# Foreground Bold
    b_red = '\033[31;1m'
    b_blue = '\033[34;1m'
    b_cyan = '\033[36;1m'
    b_white = '\033[37;1m'
    b_green = '\033[32;1m'
    b_black = '\033[30;1m'
    b_yellow = '\033[33;1m'
    b_magenta = '\033[35;1m'

# Background Standard
    red_back = '\033[41m'
    blue_back = '\033[44m'
    cyan_back = '\033[46m'
    white_back = '\033[47m'
    green_back = '\033[42m'
    black_back = '\033[40m'
    yellow_back = '\033[43m'
    magenta_back = '\033[45m'

    user_home = os.path.expanduser('~')
    this_name = os.path.basename(sys.argv[0])
    do_extract = 0
#   os_platform = sys.platform

    if read_config() != 0:
        print('No config file found... using defaults and options')
        cache_extension = 'uxx'
        do_color        = 1
        do_separate     = 0
        do_summary      = 1
        ini_file        = 'cache.ini'
        pause_output    = 0
        show_missing    = 0
        # listofArgs = str(sys.argv)
        # if sys.platform[:3] == 'win':
        #   cache_folder = '%s\\UnrealTournament\\Cache\\' % os.getenv('SYSTEMDRIVE')
        # else:
        #     cache_folder = os.path.expanduser('~/.loki/ut/Cache/')

    # Command line arguments with getopt
    try:
        # Short option syntax: "hv:"
        # Long option syntax: "help" or "verbose="
        opts, args = getopt.getopt(sys.argv[1:], 'hvspmlref:c:x:',
                       ['help', 'version', 'no-summary', 'pause', 'show-missing',
                        'no-color', 'make-rc', 'separate',  'cache-file',
                        'cache-folder', 'extract'])

    except getopt.GetoptError as err:
        # Print debug info
        print (err)

    for option, argument in opts:
        if option in ('-h', '--help'):
            print_help()
        elif option in ('-v', '--version'):
            print_ver()
        elif option in ('-s', '--no-summary'):
            do_summary = 0
        elif option in ('-p', '--pause'):
            pause_output = 1
        elif option in ('-m', '--show-missing'):
            show_missing = 1
        elif option in ('-l', '--no-color'):
            do_color = 0
        elif option in ('-r', '--make-rc'):
            write_config(sys.argv)
        elif option in ('-e', '--separate'):
            do_separate = 1
        elif option in ('-c', '--cache-folder'):
            cache_folder = argument
        elif option in ('-x', '--extract'):
            if argument.startswith(('/','./', '~/')):
                dest_folder = argument
                do_extract = 1
            else:
                print ('{}ERROR{}: Extract path must start with / ~/ or ./'.\
                       format(red, reset))
                exit(1)
        # else:
            # exit(0)

    num_args = len(sys.argv)
    if num_args == 1:
        print_help()

    if do_extract:
        extract(sys.argv[-1])
    else:
        search(sys.argv[-1])

    pass

if __name__ == "__main__":
    main(sys.argv)

# -----------------------------------------------------------------------------
# Task List
# -----------------------------------------------------------------------------
# TODO  : Get argparse working for cl arguments

# -----------------------------------------------------------------------------
# Version History
# -----------------------------------------------------------------------------
# 0.61  2015-01-06    +Path checking for extract
# 0.60  2015-01-06    +Toggle for separating files into subfolders by type
# 0.53  2015-01-06    +Added toggle for summary info
#                     +refactored a couple of variables for clarity
#                     +reflected changes in write_config()
# 0.52  2015-01-06    +extract() now puts files into a game specific subfolder,
#                      then into dated subfolders
#                     +reduced logic needed in extract
# 0.51  2015-01-05    +Updated print statements to Python3 style.
#                     +Now working with UT3
#                     +Updated write_config() to work with paths containing
#                      spaces
# 0.50  2015-01-03    +Extract now puts files in dated subfolders, under the
#                      destination folder
# 0.49  2015-01-03    +Consolidated some options, to reduce code & add clarity
#                     +Greatly improved print_help()
#                     +Fixed modeline problem that was making vim go nuts
# 0.48  2014-12-25    +Got extract function working. Simple indent problem.
# 0.47  2014-12-14    +Corrected all style issues to be compliant w/PEP-8
# 0.46  2014-11-30    +Totally re-wrote the writeconfig routine.
#                     + because configparser sucks
# 0.45  2014-11-30    +Now reads _and_ writes config file
# 0.40  2014-11-29    +Now checks for, and reads config file, if present
#                     +Added main() function & moved everything in there
#                     +Declared variables are overridden by switches
# 0.30  2014-11-28    +Extract now working
# 0.20  2014-11-28    +Dates into list
#                     +Files searchable by date
# 0.17  2014-11-26    +Enabled toggle to show/hide missing entries
#                     +Enabled toggleable colorization
# 0.16  2014-11-25    +Implemented REGEX search(Use single dot for everything)
# 0.15  2014-11-25    +Fixed pause function.
#                     +Enabled command line options
# 0.10  2014-11-24    +Disabled all moving or copying functions
#                     +Added colorization to output (not yet toggleable)
#                     +Added timestamp, changed behavior for missing files
#                     +Cleaned up output to be more readable

